define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');
    var util = require('../../../../../common/util.js');

    /**
     * Workflow Item
     */
    module.exports = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'bookTopic/saveOrSubmitBookTopic.action',
        // 批量保存/提交接口
        batchSaveAction: 'bookTopic/batchReview.action',
        // 查询接口
        detailAction: 'bookTopic/detailBookTopic.action',

        // 添加行
        addTableRow: function () {
            // 添加行
            $("#tfTBody").append(
                "<tr>" +
                "   <td></td>" +
                "   <td></td>" +
                "   <td></td>" +
                "   <td></td>" +
                "   <td></td>" +
                "   <td>" +
                "      <button class='removeTableRow btn btn-xs btn-default'>" +
                "          <i class='fa fa-minus box'></i>" +
                "      </button>" +
                "   </td>" +
                "</tr>"
            );
        },
        // 删除行
        removeTableRow: function () {
            $(this).parent().parent().remove();
        },
        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            // 添加行
            this.$container.on('click', '.addTableRow', this.addTableRow);
            // 删除行
            this.$container.on('click', '.removeTableRow', this.removeTableRow);
        },

        /**
         * 初始化页面数据
         */
        initPageData: function () {
            // 初始化册数选项
            util.sendRequest({
                data: {},
                action: 'bookTopic/bookType.action',
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        this.levelTwo = resp.data.twoLevel;
                        var levelOne = resp.data.oneLevel;
                        var $typeOneElement = this.$('#bookTopicOne'), $dom;
                        for (var i in levelOne) {
                            if (levelOne.hasOwnProperty(i)) {
                                $dom = $('<option></option>');
                                $dom.text(levelOne[i]);
                                $dom.val(i);
                                $typeOneElement.append($dom);
                            }
                        }
                        this.buildLevel2Type();
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '查询图书分类出错，请稍后重试！');
                    }
                }.bind(this),
                error: function (xhr) {

                }
            });
        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);

            this.initPageEvent();

            this.initPageData();
        }
    });
});