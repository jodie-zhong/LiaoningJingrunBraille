define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');
    var util = require('../../../../../common/util.js');

    /**
     * Workflow Item
     */
    var Item = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'examine/saveOrSubmitExamine.action',
        // 查询接口
        detailAction: 'examine/searchExamineDetail.action',
        
        levelTwo: {},
        
        /**
         * 自动生成
         */
        onAutoPage: function($auto) {
        	var params = {};
        	params.bookId = this.$('input[name="bookId"]').val();
        	params.bookName = this.$('p[data-name="bookName"]').text();
        	params.bookAuthor = this.$('input[name="bookAuthor"]').val();
        	params.bookFileType = $auto.parent().parent().find('input[name="bookFileType"],input[name="bookFascicleType"]').val();
        	params.bookFascicleBookName = this.$('div[data-area="fascicle"]').last().find('input[name="bookFascicleBookName"]').val();
        	util.sendRequest({
        		data: params,
        		action: 'common/buildWord.action',
        		success: function(resp) {
        			util.hideLoading();
        			console.log(resp.data);
        			$auto.parent().parent().find('input[name="bookFileAddress"]').val(resp.data);
        			$auto.parent().parent().find('input[name="bookFascicleAddress"]').val(resp.data);
        		}
        	});
        },
        
        /**
         * 初始化盲文形式
         */
        searchBookForm: function () {
            util.sendRequest({
                data: {
                	'code': '0010'
                },
                action: 'common/searchCodeValue.action',
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        var $typeOneElement = this.$('#bookBrailleForm'), $dom;
                        for (var i in resp.data) {
                            if (resp.data.hasOwnProperty(i)) {
                                $dom = $('<option></option>');
                                $dom.text(resp.data[i]);
                                $dom.val(i);
                                $typeOneElement.append($dom);
                            }
                        }
                        this.buildLevel2Type();
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '查询图书分类出错，请稍后重试！');
                    }
                }.bind(this),
                error: function (xhr) {

                }
            });
        },
        
        /**
         * 初始化图书类别
         */
        searchBookType: function () {
            util.sendRequest({
                data: {},
                action: 'bookTopic/bookType.action',
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        this.levelTwo = resp.data.twoLevel;
                        var levelOne = resp.data.oneLevel;
                        var $typeOneElement = this.$('#bookTopicOne'), $dom;
                        for (var i in levelOne) {
                            if (levelOne.hasOwnProperty(i)) {
                                $dom = $('<option></option>');
                                $dom.text(levelOne[i]);
                                $dom.val(i);
                                $typeOneElement.append($dom);
                            }
                        }
                        this.buildLevel2Type();
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '查询图书分类出错，请稍后重试！');
                    }
                }.bind(this),
                error: function (xhr) {

                }
            });
        },
        
        /**
         * 生成选题类型子类
         */
        buildLevel2Type: function () {
            // 先清空二级分类
            var $typeTwoElement = this.$('#bookTopicTwo');
            $typeTwoElement.empty();
            var $dom;
            // 当前选择的一级分类
            var levelOne = this.$('#bookTopicOne').val();
            if (this.levelTwo[levelOne]) {
                // 重新添加二级分类
                for (var i in this.levelTwo[levelOne]) {
                    if (this.levelTwo[levelOne].hasOwnProperty(i)) {
                        $dom = $('<option></option>');
                        $dom.text(this.levelTwo[levelOne][i]);
                        $dom.val(i);
                        $typeTwoElement.append($dom);
                    }
                }
            }
        },
        
        // 是否分册判断
        onPagination: function() {
        	var pagination = this.$('input[name="bookIsFascicle"]:checked').val();
        	this.$('div[data-area="pageinfo"]').hide();
        	if (pagination === '1') {
        		this.$('tr[data-type="3"]').show();
        		this.$('div[data-area="pageinfo"]').hide();
        	} else{
        		this.$('tr[data-type="3"]').hide();
        		this.$('div[data-area="pageinfo"]').show();
        	}
        },
        // 分页添加
        onPagePlus: function() {
        	var pageCopy;
        	pageCopy = this.$('div[data-area="fascicle"]').eq(0).clone();
        	pageCopy.find('input[name="bookFascicleAddress"],input[name="bookFascicleBookName"],textarea').val('');
        	pageCopy.appendTo('div[data-type="pageinfo"]');
        	this.searchMinusButton();
        },
        // 分页删除
        onPageMinus: function($btn) {
        	$btn.parents('div[data-area="fascicle"]').remove();
        	this.searchMinusButton();
        },
        // 加工记录添加
        onMachPlus: function() {
        	var machCopy;
        	machCopy = this.$('div[data-area = "machining"]').eq(0).clone();
        	machCopy.find('textarea').val('');
        	machCopy.appendTo('div[data-type = "mach-record"]');
        	this.searchMinusButton();
        },
        // 加工记录删除
        onMachMinus: function($btn) {
        	$btn.parents('div[data-area = "machining"]').remove();
        	this.searchMinusButton();
        },
        
        // 判断有几条数据
        searchMinusButton: function() {
        	var machLength = this.$('div[data-area = "machining"]').length;
        	if (machLength !== 1) {
        		this.$('button[data-type="record-minus"]').show();
        	} else {
        		this.$('button[data-type="record-minus"]').hide();
        	}
        	var fasLength = this.$('div[data-area="fascicle"]').length;
        	if (fasLength !== 1) {
        		this.$('button[data-type="page-minus"]').show();
        	} else {
        		this.$('button[data-type="page-minus"]').hide();
        	}
        },

        // 初审结果判断
        onHandleChange: function () {
            var handle = this.$('input[name="handleState"]:checked').val();
            this.$('div[data-area="nextFlow"]').hide();
            if (handle === '1') {
                // 建议发稿
                this.$('div[data-flow="secondAudit"]').show();
                this.$('div[data-area="opinion"]').show();
            } else {
            	// 退稿
                this.$('div[data-flow="abandoned"]').show();
                this.$('div[data-area="opinion"]').hide();
            }
        },
        
        
        /**
         * 保存或提交工作流
         * @param isSubmit
         */
        getFormData: function() {
        	var $form = this.$('#formEdit');
        	// 先调用父类生成基本的数据结构
        	var params = this._super();
        	
        	// 处理封面部份数据结构
        	params.coverList = [];  // 封面信息
        	var $tr;
        	$form.find('tr[data-area="cover"]').each(function(){
        		$tr=$(this);
        		params.coverList.push({
        			bookFileType:$tr.find('input[name="bookFileType"]').val(),
        			bookFileName: $tr.find('input[name="bookFileName"]').val(),
        			bookFileAddress:$tr.find('input[name="bookFileAddress"]').attr('data-value')
        			
        		});
        	});
        	params.machiningRecordList = [];  // 加工记录
        	var $div;
        	$form.find('div[data-area="machining"]').each(function(){
        		$div = $(this);
        		params.machiningRecordList.push({
        			machiningRecord: $div.find('textarea[name="machiningRecord"]').val()
        		});
        	});
        	params.fascicleList = []; // 分册信息
        	var $info;
        	$form.find('div[data-area="fascicle"]').each(function(){
        		$info = $(this);
        		params.fascicleList.push({
        			bookFascicleBookName:$info.find('input[name="bookFascicleBookName"]').val(),
        			bookFascicleAddress:$info.find('input[name="bookFascicleAddress"]').val(),
        			bookFascicleLocation:$info.find('textarea[name="bookFascicleLocation"]').val(),
        			bookFascicleType:$info.find('input[name="bookFascicleType"]').val(),
        			bookFascicleName:$info.find('input[name="bookFascicleName"]').val()
        		});
        	});
        	
        	console.log(params);
        	return params;
        },
        

        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            var that = this;
            
            // 选题类型子类
            this.$container.on('change', '#bookTopicOne', this.buildLevel2Type.bind(this));            
            // 是否分册
            this.$container.on('change','input[name="bookIsFascicle"]',this.onPagination.bind(this));
            // 分页信息
            this.$container.on('click','button[data-type="page-plus"]',this.onPagePlus.bind(this));
            this.$container.on('click','button[data-type="page-minus"]', function(){
            	that.onPageMinus($(this));
            });
            // 加工记录
            this.$container.on('click','button[data-type="record-plus"]', this.onMachPlus.bind(this));
            this.$container.on('click','button[data-type="record-minus"]', function(){
            	that.onMachMinus($(this));
            });
            // 初审结果
            this.$container.on('change', 'input[name="handleState"]', this.onHandleChange.bind(this));
            // 自动生成
            this.$container.on('click','button[data-type="autoGeneration"]',function () {
            	that.onAutoPage($(this));
            });
            // 文件下载
            that.$container.on('click','button[data-down="download"]',function() {
            	if($(this).attr('data-address')){
                    window.open(util.getServerBase() + 'common/downloadFile.action?path=' + encodeURIComponent($(this).attr('data-address')), '_blank');
                }
            })
        },

        /**
         * 初始化页面数据
         */
        initPageData: function () {
			// 初始化日期组件
            this.$('input.date-time').datetimepicker({
                format: 'YYYY-MM-DD',
                locale: 'zh-cn',
                sideBySide: true
            });
            this.searchBookForm();
            this.searchBookType();
            this.onPagination();
            this.onHandleChange();
            this.searchMinusButton();
        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);
        },

        /**
         * 渲染页面
         */
        render: function () {
            this._super();

            this.initPageEvent();

            this.initPageData();
        }

    });


    module.exports = Item;

});
