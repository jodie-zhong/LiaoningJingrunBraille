define(function(require, exports, module) {
	"use strict";

	var ItemBase = require('../item-base');
	var util = require('../../../../../common/util.js');

	/**
	 * Workflow Item
	 */
	var Item = ItemBase.extend({
		// 保存/提交接口
		saveAction: 'cnExamine/saveOrSubmitCnExamine.action',
		// 查询接口
		detailAction: 'cnExamine/searchCnExamineDetail.action',
		
		/**
		 * 处理意见判断
		 */
		onHandleChange: function() {
			var handle = this.$('input[name="handleState"]:checked').val();
			this.$('div[data-area="nextFlow"]').hide();
			if(handle === '1') {
				// 建议发稿
				this.$('div[data-flow="cnFinallRewrite"]').show();
			} else {
				// 退稿
				this.$('div[data-flow="cnFirst"]').show();
			}
		},
		
		/**
		 * 保存或提交工作流
		 */
		getFormData: function() {
			var $form = this.$('#formEdit');
			// 先调用父类生成基本的数据结构
			var params = this._super();
			// 处理封面部份数据结构
			params.machiningRecordList = []; // 加工记录
			var $div;
			$form.find('input[name="machiningRecord"]').each(function() {
				$div = $(this);
				params.machiningRecordList.push({
					machiningRecord: $div.val()
				});
			});
			return params;
		},

		/**
		 * 初始化页面事件
		 */
		initPageEvent: function() {
			var that = this;
			// 处理意见
			this.$container.on('change', 'input[name="handleState"]', this.onHandleChange.bind(this));
		},

		/**
		 * 初始化页面数据
		 */
        initPageData: function () {
        	// 处理意见
			this.onHandleChange();
        },	

		/**
		 * 构造函数
		 * @param container
		 * @param tpl
		 */
		init: function(container, tpl) {
			this._super(container, tpl);
		},

		/**
		 * 渲染页面
		 */
		render: function() {
			this._super();

			this.initPageEvent();

			this.initPageData();
		}

	});

	module.exports = Item;

});