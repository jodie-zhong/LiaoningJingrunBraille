define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');

    /**
     * Workflow Item
     */
    module.exports = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'quality/saveOrSubmitQuality.action',
        // 批量保存/提交接口
        batchSaveAction: 'quality/batchQuality.action',
        // 查询接口
        detailAction: 'quality/searchQualityTestDetail.action',

        /**
         * 计算差错
         */
        calculateDiff: function () {
            var diffInfo = [];
            this.$("tbody[data-name='trueOrFalseTb']").children().each(function () {
                var confirmCheckbox = $(this).find("input[name='confirmSelection']");// 没有是否同意的选项表示当前是查看状态，用data-is-confirm来判断
                var checked = confirmCheckbox.prop('checked') === undefined ? ($(this).attr('data-is-confirm') === '1') : confirmCheckbox.prop('checked');
                if (checked) {
                    var fasciculeId = $(this).attr("data-fascicule-id");
                    var idx = -1;
                    for (var i = 0; i < diffInfo.length; i++) {
                        if (diffInfo[i].fasciculeId === fasciculeId) {
                            idx = i;
                            break;
                        }
                    }
                    if (idx < 0) {
                        diffInfo.push({fasciculeId: fasciculeId, fasciculeName: $(this).attr("data-fascicule-name"), diffCount: 1});
                    } else {
                        diffInfo[idx].diffCount++;
                    }
                }
            });
            var diffTbHtml = "";
            for (var i = 0; i < diffInfo.length; i++) {
                diffTbHtml +=
                    "<tr  data-fascicule-id='" + diffInfo[i].fasciculeId + "'>" +
                    "   <td>" + (i + 1) + "</td>" +
                    "   <td>" + diffInfo[i].fasciculeName + "</td>" +
                    "   <td data-name='diffCount'>" + diffInfo[i].diffCount + "</td>" +
                    "   <td data-name='diffRate'>" + (diffInfo[i].diffCount / this.data.info.tprQualityWordNum * 10000).toFixed(2) + "</td>" +
                    "</tr>";
            }
            this.$("tbody[data-name='diffTb']").html(diffTbHtml);
        },

        /**
         * 生成参数
         */
        getFormData: function () {
            var params = {qualityRightWrongEntities: [], bookWrongEntities: []};
            // 正误表数据
            this.$("tbody[data-name='trueOrFalseTb']").children().each(function () {
                params.qualityRightWrongEntities.push({
                    rigthWrongId: $(this).attr("data-right-wrong-id"),
                    isConfirm: $(this).find("input[name='confirmSelection']").prop('checked') ? "1" : "2",
                    confirmCause: $(this).find("input[name='disConfirmReason']").val()
                });
            });
            // 差错表数据
            this.$("tbody[data-name='diffTb']").children().each(function () {
                params.bookWrongEntities.push({
                    bookFascicleId: $(this).attr("data-fascicule-id"),
                    bookWrongNum: $(this).find("td[data-name='diffCount']").text(),
                    bookWrongRate: $(this).find("td[data-name='diffRate']").text()
                });
            });
            params.handleContentOne = this.$("textarea[name='handleContentOne']").val();
            params.taskUsers = this.$("input[name='taskUsers']").attr('data-value');
            params.flowId = this.$("input[name='flowId']").val();
            params.flowName = this.$("input[name='flowName']").val();
            return params;
        },

        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            var that = this;
            // 是否确认监听
            this.$container.on('change', 'input[name="confirmSelection"]', function () {
                var selectionRow = $(this).parents('tr');
                // 确认
                if ($(this).prop('checked')) {
                    // 判断全选
                    var allChecked = true;
                    selectionRow.parent().find('input[name="confirmSelection"]').each(function () {
                        if (!$(this).prop('checked')) {
                            allChecked = false;
                            return false;
                        }
                    });
                    if (allChecked) {
                        $(this).parents('table').find('input[name="confirmSelectionBatch"]').prop('checked', 'checked');
                    }
                }
                // 不确认
                else {
                    // 去掉全选
                    $(this).parents('table').find('input[name="confirmSelectionBatch"]').removeProp('checked');
                }
                // 计算差错率
                that.calculateDiff();
            });
            // 是否批量确认
            this.$container.on('change', 'input[name="confirmSelectionBatch"]', function () {
                // 确认
                if ($(this).prop('checked')) {
                    $(this).parents('table').find('input[name="confirmSelection"]').each(function () {
                        $(this).prop('checked', 'checked');
                    });
                }
                // 不确认
                else {
                    $(this).parents('table').find('input[name="confirmSelection"]').removeProp('checked');
                    that.$("tbody[data-name='diffTb']").html('');
                }
                // 计算差错率
                that.calculateDiff();
            });
        },

        /**
         * 初始化页面数据
         */
        initPageData: function () {
            this.calculateDiff();
            // 判断全选
            var allChecked = true;
            this.$('input[name="confirmSelection"]').each(function () {
                if (!$(this).prop('checked')) {
                    allChecked = false;
                    return false;
                }
            });
            if (allChecked) {
                this.$('input[name="confirmSelectionBatch"]').prop('checked', 'checked');
            }
        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);
        },

        /**
         * 渲染页面
         */
        render: function () {
            this._super();
            this.initPageEvent();
            this.initPageData();
        }
    });
});