define(function (require, exports, module) {
    "use strict";

    var util = require('../../../common/util');
    var Base = require('../../../common/base-dialog');

    // 表单校验组件
    require('../../../assets/plugins/form-validation/formValidation.min');
    require('../../../assets/plugins/form-validation/formValidation.min.css');
    // 日期组件
    require('../../../assets/plugins/bootstrap-datetimepicker/js/bootstrap-datatimepicker');
    require('../../../assets/plugins/bootstrap-datetimepicker/js/moment-with-locales');
    require('../../../assets/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.css');
    // 右侧流程提示窗模板
    var tipTpl = require('./workflow-tip.tpl');
    // 流程映射关系
    var flowMapping = require('./workflow-mapping');

    var Module = Base.extend({
        /**
         * 流程信息接口
         */
        flowInfoAction: 'topic/listFlowInfo.action',
        /**
         * 流程列表接口（右侧小窗口）
         */
        flowListAction: 'topic/listFlowStage.action',
        // 图书或选题ID
        // 如果未批量审批模式，bookId可能为一个逗号分隔的数组
        bookId: null,
        topicId: null,
        // 年月，和bookId、topicId相同作用，图书印制单审核类业务使用
        yearMonth: null,
        // 流程类型ID
        flowId: null,
        // 流程类型名称
        flowName: null,
        // 任务ID
        taskId: null,
        // 流程数据
        flowData: null,
        // 任务大类
        deployId: null,
        // 正在展开的Workflow Item
        loadingFlowItem: null,
        // 可编辑的Workflow Item（每个流程最多只有一个可编辑）
        editFlowItem: null,

        // 印刷需要区分
        searchFlowId: null,

        // 重印审核管理用
        reprintBookAuditId: null,

        // 版署需要
        isbncipApplyId: null,
        // 查看模式
        isView: false,

        /**
         * 第一步查询流程信息
         */
        searchFlowInfo: function () {
            // bookId可能是一个数组，只取第一个
            var id = this.bookId ? this.bookId.split(',')[0] : '';
            var topicId = this.topicId ? this.topicId.split(',')[0] : '';
            util.showLoading();
            util.sendRequest({
                action: this.flowInfoAction,
                data: {
                    bookId: id,
                    topicId: topicId,
                    yearMonth: this.yearMonth,
                    searchFlowId: this.searchFlowId,
                    reprintBookAuditId: this.reprintBookAuditId,
                    isbncipApplyId: this.isbncipApplyId,
                    reprintFlag: this.reprintFlag,
                    bookDeploymentKey: this.deployId,
                    isView: this.isView || '',
                    stylebookGetId: this.stylebookGetId,
                    zPublishPlanReportId: this.zPublishPlanReportId,
                },
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        // 判断是否有bookName和dutyEditor字段，批量处理是不显示图书名称和责任编辑
                        if (typeof resp.data.bookName !== 'undefined') {
                            // 渲染头部图书名称和责任编辑字段
                            if (resp.data.bookName) {
                                var tBName = resp.data.bookName.length < 21 ? resp.data.bookName : resp.data.bookName.substring(0, 20) + "...";
                                this.$('.titleBookName').text('图书名称：' + tBName);
                                this.$('.titleBookName').attr('title', resp.data.bookName);
                            }
                            if (resp.data.dutyEditor) {
                                var tBEditor = resp.data.dutyEditor.length < 21 ? resp.data.dutyEditor : resp.data.dutyEditor.substring(0, 20) + "...";
                                this.$('.titleDutyEditor').text('责任编辑：' + tBEditor);
                                this.$('.titleDutyEditor').attr('title', resp.data.dutyEditor);
                            }
                        } else {
                            this.$('.titleBookName').text('');
                            this.$('.titleDutyEditor').text('');
                        }
                        // 批量操作(但需要排除有的页面传多个id,同时显示全部的列表的情况)
                        if ((this.bookId && this.bookId.indexOf(',') >= 0) || (this.topicId && this.topicId.indexOf(',') >= 0)) {
                            if (this.showAllList) {
                                this.flowData = resp.data.listFlow;
                            } else {
                                // 如果是批量操作只保留最后一个工作流
                                this.flowData = resp.data.listFlow.slice(-1);
                            }
                            this.$('.titleBookName').text('');
                            this.$('.titleDutyEditor').text('');
                        } else {
                            this.flowData = resp.data.listFlow;
                        }
                        this.flowId = resp.data.currentFlow;
                        this.flowName = resp.data.currentFlowName;
                        // TODO: 暂时注掉
                        // 加载右侧工作流提示
                        // this.renderWorkflowTip();
                        // 同步生成界面
                        this.renderWorkflowPanel();
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '查询任务流程信息失败！');
                    }
                }.bind(this),
                error: function (xhr) {
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('查询任务流程信息失败！');
                }
            });
        },

        /**
         * 第二步：生成任务提示窗
         */
        renderWorkflowTip: function () {
            util.sendRequest({
                action: this.flowListAction,
                data: {
                    flowId: this.flowId
                },
                success: function (resp) {
                    if (resp.code === 0) {
                        resp.data.highlightFlowId = this.flowId;
                        this.$('#panelWorkflow').append(util.template(tipTpl, resp.data));
                    } else {
                        console.log(resp);
                    }

                }.bind(this),
                error: function (xhr) {
                    // 什么也不做
                    console.log(xhr);
                }.bind(this)

            });
        },

        /**
         * 生成工作流面板
         */
        renderWorkflowPanel: function () {
            var that = this;
            var flowPanelTpl = '' +
                '<% for(var i = 0; i < list.length;i++) { %>' +
                '<% if(list[i].flowId !== "abandoned") { %>' +
                '<div class="flow-panel">' +
                '  <div class="flow-panel-header"' +
                '    <span class="c-primary"><i class="fa fa-caret-right"></i> <%- list[i].flowName %></span>' +
                '    <% if(list[i].submitUserName && list[i].submitDatetime) { %>' +
                '    <span style="color: #999; font-size: 12px;">（处理人：<%- list[i].submitUserName %> | 处理时间：<%- list[i].submitDatetime %>）</span>' +
                '    <% } %>' +
                '  </div>' +
                '  <div class="flow-panel-body" data-taskId="<%- list[i].taskId %>" data-flowId="<%- list[i].flowId %>" data-instance="<%- list[i].processInstanceId %>" data-index="<%- i %>">' +
                '  </div>' +
                '</div>' +
                '<% } %>' +
                '<% } %>';

            var $flowPanel = this.$('#panelWorkflow');
            $flowPanel.html(util.template(flowPanelTpl, {list: this.flowData, isView: this.isView}));

            // 查看模式
            if (this.isView) {
                // 资源库的图书库需要按需匹配，对应模块打开
                if (typeof this.libraryIndex !== 'undefined') {// 证明是图书库
                    var index=this.libraryIndex;
                    this.$('.flow-panel').eq(index).find('.fa-caret-right').removeClass('fa-caret-right').addClass('fa-caret-down');
                    this.loadingFlowItem = this.$('.flow-panel').eq(index).find('.flow-panel-body');
                    this.renderWorkflowItem(this.loadingFlowItem.attr('data-flowId'), this.loadingFlowItem.attr('data-taskId'), this.loadingFlowItem.attr('data-index'), this.loadingFlowItem.attr('data-instance'), false);
                } else {
                    // 第一个为当前工作流
                    this.$('.flow-panel').first().find('.fa-caret-right').removeClass('fa-caret-right').addClass('fa-caret-down');
                    this.loadingFlowItem = this.$('.flow-panel').first().find('.flow-panel-body');
                    // 默认渲染第一个
                    this.renderWorkflowItem(this.loadingFlowItem.attr('data-flowId'), this.loadingFlowItem.attr('data-taskId'), this.loadingFlowItem.attr('data-index'), this.loadingFlowItem.attr('data-instance'), false);
                }
            } else {
                // 最后一个为当前编辑
                this.$('.flow-panel').last().find('.fa-caret-right').removeClass('fa-caret-right').addClass('fa-caret-down');
                this.$('.flow-panel').last().find('.flow-panel-header').addClass('frozen');
                this.loadingFlowItem = this.$('.flow-panel').last().find('.flow-panel-body');
                // 默认渲染最后一个编辑状态
                this.renderWorkflowItem(this.loadingFlowItem.attr('data-flowId'), this.loadingFlowItem.attr('data-taskId'), this.loadingFlowItem.attr('data-index'), this.loadingFlowItem.attr('data-instance'), true);
            }
        },

        /**
         * 生成每个WorkFlow项目
         * @param flowId
         * @param taskId
         * @param current
         */
        renderWorkflowItem: function (flowId, taskId, itemIndex, instance, current) {
            if (flowMapping[flowId]) {
                // 匹配到开始渲染
                util.showLoading();
                var that = this;
                // 加载模板
                var item = './modules/public/workflow/items/' + flowMapping[flowId];
                seajs.use([item + '.js', item + '.tpl'], function (Item, tpl) {
                    // 避免加载异常
                    if (!Item || !tpl) {
                        util.hideLoading();
                        util.showAlert('加载工作流组件出错：' + flowMapping[flowId]);
                        return;
                    }

                    // 初始化Flow Item
                    var flowItem = new Item(that.loadingFlowItem, tpl);
                    flowItem.workflowDialog = that;
                    // 如果是当前流程Item则设置到全局
                    if (current) {
                        that.editFlowItem = flowItem;
                    }
                    // 查询流程详情
                    util.sendRequest({
                        action: flowItem.detailAction,
                        data: {
                            taskId: taskId,
                            currentFlowId: flowId,
                            processInstanceId: instance,
                            bookId: that.bookId,
                            topicId: that.topicId,
                            stylebookGetId: that.stylebookGetId,
                            reprintFlag: that.reprintFlag,
                            hReprintBookAnditId: that.hReprintBookAnditId,
                            reprintBookAuditId: that.reprintBookAuditId,
                            zPublishPlanReportId: that.zPublishPlanReportId
                        },
                        success: function (resp) {
                            util.hideLoading();
                            if (resp.code === 0) {
                                // 更新当前任务人
                                var taskFlow = resp.data.nextTaskFlowInfoEntity, i, j;
                                var flows = resp.data.userTaskEntities;
                                if (taskFlow && taskFlow.nextFlowTaskUserIds) {
                                    // 说明有数据，开始找对应的流程
                                    if (flows) {
                                        for (i = 0; i < flows.length; i++) {
                                            if (taskFlow.flowId === flows[i].flowId) {
                                                flows[i].nextFlowTaskUserIds = taskFlow.nextFlowTaskUserIds;
                                                flows[i].nextFlowTaskUserNames = taskFlow.nextFlowTaskUserNames;
                                            }
                                        }
                                    }
                                } else if (resp.data.nextTaskFlowList && resp.data.nextTaskFlowList.length > 0) {
                                    // 下一流程任务为复数的，会使用nextTaskFlowList、而不使用nextTaskFlowInfoEntity
                                    for (j = 0; j < resp.data.nextTaskFlowList.length; j++) {
                                        taskFlow = resp.data.nextTaskFlowList[j];
                                        for (i = 0; i < flows.length; i++) {
                                            if (taskFlow.flowId === flows[i].flowId) {
                                                flows[i].nextFlowTaskUserIds = taskFlow.nextFlowTaskUserIds;
                                                flows[i].nextFlowTaskUserNames = taskFlow.nextFlowTaskUserNames;
                                                break;
                                            }
                                        }
                                    }
                                }

                                // 设置Flow Item的数据
                                flowItem.setData({
                                    isEdit: current,
                                    info: $.extend({flowId: flowId, taskId: taskId, itemIndex: itemIndex}, resp.data)
                                });

                                if (current || typeof that.libraryIndex !== 'undefined') {
                                    // typeof that.libraryIndex !== 'undefined'是针对图书库的查看显示对应位置
                                    // 表单校验
                                    that.initValidate(that.$('#panelWorkflow'));
                                    // 自动滚动
                                    setTimeout(function () {
                                        // 如果比较快的走到此处，可能对话框还没完全展示，直接scroll会滚不动，所以增加一些延迟
                                        that.$('#panelWorkflow').animate({scrollTop: that.loadingFlowItem.position().top - 20}, 200);
                                    }, 300);
                                }
                            } else {
                                console.log(resp);
                                util.showAlert(resp.message || '查询流程详情出错，请稍后重试！');
                            }
                        },
                        error: function (xhr) {
                            util.hideLoading();
                            console.log(xhr);
                            util.showAlert('查询流程详情出错，请稍后重试！');
                        }
                    });
                });

            } else {
                // 配置错误，找不到对应FlowItem
                util.showAlert('工作流类型匹配失败，请联系管理员！<br>flowId：' + flowId);
            }
        },

        /**
         * 计算当前元素相对于#panelWorkflow的偏移
         * @param el
         * @returns {number}
         */
        getOffsetTop: function (el) {
            var yPos = 0;
            // 网上找到的一段方法
            while (el) {
                if (el.id === 'panelWorkflow') {
                    yPos += (el.offsetTop + el.clientTop);
                    break;
                } else {
                    yPos += (el.offsetTop + el.clientTop);
                }
                el = el.offsetParent;
            }
            return yPos - 120;
        },

        /**
         * 提交前的校验
         * @param func 校验成功回调
         */
        beforeSubmit: function (taskId, func) {
            var that = this;
            util.showLoading();
            util.sendRequest({
                action: 'common/taskCompletionStatus.action',
                data: {
                    taskId: taskId
                },
                success: function (resp) {
                    util.hideLoading();
                    if (resp && resp.code === 1) {
                        func();
                    } else {
                        that.close({refresh: true});
                        console.log(resp);
                        util.showAlert(resp.message || '状态出错，请稍后重试！');
                    }
                },
                error: function (xhr) {
                    // XHR错误
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('状态出错，请稍后重试！');
                }
            });
        },

        /**
         * 执行保存或提交操作
         * @param params
         */
        doSave: function (params) {
            var that = this;
            // 下发请求
            util.showLoading('正在提交数据...');
            util.sendRequest({
                action: (this.bookId || this.topicId || '').indexOf(',') >= 0 ? this.editFlowItem.batchSaveAction : this.editFlowItem.saveAction,
                data: params,
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        util.showAlert('操作成功！', function () {
                            that.close({refresh: true});
                        });
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '操作失败，请稍后重试！');
                    }
                },
                error: function (xhr) {
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('操作失败，请稍后重试！');
                }
            });
        },

        /**
         * 保存或提交工作流
         * @param isSubmit
         */
        saveWorkFlow: function (isSubmit) {
            // 没有找到编辑项肯定是流程出现异常
            var $form = this.$('#panelWorkflow');
            if (this.editFlowItem) {
                var message = this.editFlowItem.confirmMessage;
                if (this.validate($form) === true) {
                    var params = this.editFlowItem.getFormData();
                    // 提交或保存
                    params.operationType = isSubmit ? '2' : '1';
                    params.topicId = params.topicId || this.topicId;
                    params.topicIds = params.topicIds || this.topicId;
                    params.bookId = params.bookId || this.bookId;
                    params.bookIds = params.bookIds || this.bookId;
                    params.yearMonth = params.yearMonth || this.yearMonth;
                    params.taskId = params.taskId || this.taskId;
                    params.taskIds = params.taskIds || this.taskId;
                    params.currentFlowId = params.currentFlowId || this.flowId;
                    params.currentFlowName = params.currentFlowName || this.flowName;
                    params.reprintBookAuditId = params.reprintBookAuditId || this.reprintBookAuditId;
                    var that = this;
                    if (isSubmit) {
                        // 确认是否下发
                        util.showConfirm(message || '确定要提交么？', function () {
                            that.beforeSubmit(params.taskId, function () {
                                that.doSave(params);
                            });
                        });
                    } else {
                        that.doSave(params);
                    }

                } else {
                    // 尝试滚动到可视区域，需要进一步验证
                    var $el = this.$('.has-error');
                    var el = $el[0];
                    this.$('#panelWorkflow').animate({scrollTop: this.getOffsetTop(el)}, 200);
                    //alert(this.getOffsetTop(el));
                }
            }
        },

        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            var that = this;
            // 展开面板
            this.$container.on('click', '.flow-panel-header', function () {
                var $el = $(this);
                if ($el.hasClass('frozen')) {
                    return;
                }
                var $pBody = $el.parent().find('.flow-panel-body');
                if ($pBody.find('.form-group').length === 0) {
                    // 修改图标样式
                    $el.find('.fa-caret-right').removeClass('fa-caret-right').addClass('fa-caret-down');
                    // 加载当前面板
                    that.loadingFlowItem = $pBody;
                    // 默认渲染最后一个编辑状态
                    that.renderWorkflowItem(that.loadingFlowItem.attr('data-flowId'), that.loadingFlowItem.attr('data-taskId'), that.loadingFlowItem.attr('data-index'), that.loadingFlowItem.attr('data-instance'), false);
                } else {
                    // 有内容，判断需要展开还是收起
                    if ($pBody.find('.form-horizontal:visible').length > 0) {
                        $el.find('.fa-caret-down').removeClass('fa-caret-down').addClass('fa-caret-right');
                        $pBody.find('.form-horizontal').hide();
                    } else {
                        $el.find('.fa-caret-right').removeClass('fa-caret-right').addClass('fa-caret-down');
                        $pBody.find('.form-horizontal').show();
                    }
                }
            });
            
            // 文本框
            this.$container.on('change', 'textarea', function() {
            	var len = $(this).val().length;
            	var max = $(this).attr('maxlength');
            	$(this).parent().find('.len').text(len +'/'+ max);
            });

            // 保存
            this.$container.on('click', '#btnSaveWorkflow', function () {
                this.saveWorkFlow(false);
            }.bind(this));

            // 提交
            this.$container.on('click', '#btnSubmitWorkflow', function () {
                this.saveWorkFlow(true);
            }.bind(this));
        },

        /**
         * 判断按钮显示（默认都隐藏，根据参数判断显示）
         */
        changeBtnState: function (btnState) {
            // 显示提交按钮
            if (btnState && btnState === 1) {
                this.$("#btnSaveWorkflow").hide();
                this.$("#btnSubmitWorkflow").show();
            }
            // 显示保存按钮
            else if (btnState && btnState === 2) {
                this.$("#btnSaveWorkflow").show();
                this.$("#btnSubmitWorkflow").hide();
            }
            // 提交保存按钮都显示
            else {
                this.$("#btnSaveWorkflow").show();
                this.$("#btnSubmitWorkflow").show();
            }
        },

        /**
         * 初始化页面数据
         */
        initPageData: function (data) {
            // 第一步查询流程信息
            this.searchFlowInfo();
            // 判断按钮显示
            this.changeBtnState(data.btnState);
        },

        /**
         * 初始化时被调用
         */
        onInit: function ($el, tpl, data, indexRef) {
            this._super($el, tpl, data, indexRef);

            // 允许自定义流程信息集合接口
            this.flowInfoAction = data.flowInfoAction || this.flowInfoAction;
            this.bookId = data.bookId;
            this.showAllList = data.showAllList;
            this.topicId = data.topicId;
            this.yearMonth = data.yearMonth;
            this.taskId = data.taskId;

            this.deployId = data.deployId;
            // 查看模式
            this.isView = data.isView;
            // 资源库的图书库特有的
            this.libraryIndex = data.libraryIndex;
            // 具体模式
            this.btnText = data.btnText;
            // 自定义参数
            this.searchFlowId = data.searchFlowId;
            this.reprintBookAuditId = data.reprintBookAuditId;
            this.isbncipApplyId = data.isbncipApplyId;//cip版署专用
            this.reprintFlag = data.reprintFlag;//汉文再版重印审核
            this.hReprintBookAnditId = data.hReprintBookAnditId;//汉文再版重印审核
            this.stylebookGetId = data.stylebookGetId;
            this.zPublishPlanReportId = data.zPublishPlanReportId;	// 出版计划上报
            var obj = {
                btnText: this.btnText,
                isView: this.isView
            }
            this.initTemplate(tpl, {isView: obj});

            // TODO: 调试流程样式用
            if (data.debug) {
                this.flowData = [{
                    "taskId": "",
                    "category": null,
                    "flowName": "样式调试",
                    "currentFlowId": null,
                    "flowId": "",
                    "submitUserName": null,
                    "submitDatetime": null,
                    "processInstanceId": null
                }];

                var flowPanelTpl = '' +
                    '<% for(var i = 0; i < list.length;i++) { %>' +
                    '<div class="flow-panel">' +
                    '  <div class="flow-panel-header"' +
                    '    <span class="c-primary"><i class="fa fa-caret-right"></i> <%- list[i].flowName %></span>' +
                    '    <% if(list[i].submitUserName && list[i].submitDatetime) { %>' +
                    '    <span style="color: #999; font-size: 12px;">（处理人：<%- list[i].submitUserName %> | 处理时间：<%- list[i].submitDatetime %>）</span>' +
                    '    <% } %>' +
                    '  </div>' +
                    '  <div class="flow-panel-body" data-taskId="<%- list[i].taskId %>" data-flowId="<%- list[i].flowId %>" data-instance="<%- list[i].processInstanceId %>">' +
                    '  </div>' +
                    '</div>' +
                    '<% } %>';

                var $flowPanel = this.$('#panelWorkflow');
                $flowPanel.html(util.template(flowPanelTpl, {list: this.flowData}));

                // 最后一个为当前编辑
                this.loadingFlowItem = this.$('.flow-panel').last().find('.flow-panel-body');

                var that = this;
                // 加载模板
                var item = './modules/public/workflow/items/' + data.flowTemplate;
                seajs.use([item + '.js', item + '.tpl'], function (Item, tpl) {
                    // 避免加载异常
                    if (!Item || !tpl) {
                        util.hideLoading();
                        util.showAlert('加载工作流组件出错：' + data.flowTemplate);
                        return;
                    }

                    // 初始化Flow Item
                    var flowItem = new Item(that.loadingFlowItem, tpl);
                    flowItem.workflowDialog = that;
                    that.editFlowItem = flowItem;

                    flowItem.setData({
                        isEdit: data.isEdit,
                        info: {
                            nextTaskFlowInfoEntity: {},
                            userTaskEntities: []
                        }
                    });

                });
            } else {
                // 初始化页面事件
                this.initPageEvent();

                // 初始化页面数据
                this.initPageData(data);
            }
        },

        /**
         * 页面返回事件
         * @param data
         */
        onBack: function (data) {
            this._super(data);

            if (this.editFlowItem && this.editFlowItem.back) {
                this.editFlowItem.back(data);
            }
        },

        /**
         * 窗口缩放事件
         */
        onResize: function () {
            this._super();
        },

        /**
         * 页面销毁
         */
        onDestroy: function () {
            this._super();
        }


    });

    module.exports = Module;
});