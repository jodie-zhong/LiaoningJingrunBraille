define(function (require, exports, module) {
    "use strict";

    var util = require('../../../common/util');
    var DialogBase = require('../../../common/base-dialog');
    var listIn = require('./labor-management-edit-list.tpl');
    var Module = DialogBase.extend(new function () {
        var that;
        var info;

        /**
         * 列表
         */
        function listDetail() {
            var params = {
                jobnIsideId: ''
            };
            if (info && info.currentId) {
                params.jobnIsideId = info.currentId;
            }
            util.showLoading();
            util.sendRequest({
                data: params,
                action: 'job/detailJobInside.action',
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        that.$('#formJob').html(util.template(listIn, {
                            list: resp.data
                        }));
                        that.$('#formJob input').each(function () {
                            that.addValidateField($('#formJob'), $(this));
                        });
                    } else {
                        util.showAlert(resp.message || '查询人员出错，请稍后重试！');
                    }
                },
                error: function (xhr) {
                    // XHR错误
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('查询人出错，请稍后重试！');
                }
            });
        }

        /**
         * 保存数据
         */
        function saveInfo() {
            // 表单验证
            var $form = that.$('#formJob');
            // 没有错误开始处理
            if (that.validate($form) === true) {
                // 通过公共方法生成表单参数
                var params = that.buildFormParams($form.find('input'));
                var action = 'job/createJobInside.action';
                if (info && info.currentYear && info.currentMonth) {
                    params.jobInsideYear = info.currentYear;
                    params.jobInsideMonth = info.currentMonth;
                } else {
                    // 修改
                    action = 'job/modifyJobInside.action';
                    params.jobnIsideId = info.currentId;
                }
                // 下发请求
                util.showLoading();
                util.sendRequest({
                    data: params,
                    action: action,
                    success: function (resp) {
                        util.hideLoading();
                        if (resp.code === 0) {
                            util.showAlert(resp.message || '录入成功!', function () {
                                that.close({refresh: true});
                            });
                        } else {
                            // 业务执行失败
                            console.log(resp);
                            util.showAlert(resp.message || '录入出错，请稍后重试！');
                        }
                    },
                    error: function (xhr) {
                        // XHR错误
                        util.hideLoading();
                        console.log(xhr);
                        util.showAlert('录入出错，请稍后重试！');
                    }
                });
            }
        }

        /**
         * 初始化页面事件
         */
        function initPageEvent() {
            // 保存
            that.$container.on('click', '#btnSave', saveInfo);
            // 计算页面数据
            that.$container.on('input', 'input[name="jobInsideReward"],input[name="overtimePay"],input[name="serviceFee"],input[name="benefitAllowance"],input[name="foodAllowance"],input[name="suburbAllowance"]', function () {
                console.log(parseFloat(that.$('input[name="jobInsideReward"]').val()) + parseFloat(that.$('input[name="overtimePay"]').val()) + parseFloat(that.$('input[name="serviceFee"]').val()) + parseFloat(that.$('input[name="benefitAllowance"]').val()) + parseFloat(that.$('input[name="foodAllowance"]').val()) + parseFloat(that.$('input[name="suburbAllowance"]').val()))
                var num = parseFloat(that.$('input[name="jobInsideReward"]').val()) + parseFloat(that.$('input[name="overtimePay"]').val()) + parseFloat(that.$('input[name="serviceFee"]').val()) + parseFloat(that.$('input[name="benefitAllowance"]').val()) + parseFloat(that.$('input[name="foodAllowance"]').val()) + parseFloat(that.$('input[name="suburbAllowance"]').val());
                that.$('input[name="total"]').val(num.toFixed(2));
            });
            // 保存小数
            that.$container.on('change', 'input[name="jobInsideDays"],input[name="jobInsideReward"],input[name="overtimePay"],input[name="serviceFee"],input[name="benefitAllowance"],input[name="foodAllowance"],input[name="suburbAllowance"],input[name="total"]', function () {
                var $el = $(this)
                var price = $el.val();
                var bPrice = parseFloat(price).toFixed(2);
                if (isNaN(bPrice)) {
                    bPrice = '0.00';
                }
                $el.val(bPrice);
            });
        }

        /**
         * 初始化页面数据
         */
        function initPageData() {
            if (info && info.currentId) {
                listDetail();
            }
            that.initValidate(that.$('#formJob'));
        }

        /**
         * 初始化时被调用
         */
        this.onInit = function ($el, tpl, data, indexRef) {
            this._super($el, tpl, data, indexRef);
            that = this;
            info = data;
            that.initTemplate(tpl, {});
            var obj = {};
            that.$('#formJob').html(util.template(listIn, {list: obj}));
            // 初始化页面事件
            initPageEvent();
            // 初始化页面数据
            initPageData();
        };

        /**
         * 页面返回事件
         * @param data
         */
        this.onBack = function (data) {
            this._super(data);
        };

        /**
         * 窗口缩放事件
         */
        this.onResize = function () {
            this._super();
        };

        /**
         * 页面销毁
         */
        this.onDestroy = function () {
            this._super();
        };

    }());

    module.exports = Module;
});
