define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');
    var util = require('../../../../../common/util.js');

    /**
     * Workflow Item
     */
    var Item = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'cipEditionApply/doSaveOrSubmitIssued.action',

        // 查询接口
        detailAction: 'cipEditionApply/doVersionIssued.action',

        /**
         * 选通过处理，书号和条形码必须写/选未通过处理，原因必须写
         */
        onHandleChange: function ()  {
            // 因后台会回两条数据，但对flowId为uploadClassNumber操作，而flowId为failureApply永远不显示,切换时把所有相反的数据清空
            var num=0;
            this.$('#selectIssuedTable tr').each(function () {
                var $el=$(this);
                var isPassNum=$el.find('input[type="radio"]:checked').val();
                if(isPassNum==='1'){
                    $el.find('.fileUp').parent().show();
                    $el.find('input[name="notPassCause"]').parent().hide();
                    // $el.find('input[name="notPassCause"]').val('');// 清空数据
                    $el.find('input[name="bookIsbn"]').parent().show();

                }else {
                    $el.find('.fileUp').parent().hide();
                    $el.find('input[name="notPassCause"]').parent().show();
                    $el.find('input[name="bookIsbn"]').parent().hide();
                    num++;
                }
            });
            if(num===$('#selectIssuedTable tr').length){
                 this.$('div[data-flow="uploadClassNumber"]').hide();
            }else{
                this.$('div[data-flow="uploadClassNumber"]').show();
            }

        },

        getFormData:function () {
            var $form = this.$('#formCioIssuedEdit');
            // 先调用父类生成基本的数据结构
     	    // var params = {};
            var params = this._super();
            var CipApplyList=[];
            this.$('#selectIssuedTable tr').each(function () {
                var $el=$(this);
                var cipList = {};
                cipList.bookIsbn=$el.find('input[name="bookIsbn"]').val();
                // cipList.bookDetailClassNum=$el.find('input[name="bookDetailClassNum"]').val();
                cipList.bookId=$el.attr('data-id');
                cipList.isPass=$el.find('input[type="radio"]:checked').val();
                if(cipList.isPass==='2'){
                    cipList.flowId='failureApply';
                    cipList.flowName='未通过处理';
                    cipList.notPassCause=$el.find('input[name="notPassCause"]').val();
                }else {
                    cipList.flowId='uploadClassNumber';
                    cipList.flowName='分类号上传';
                }
                cipList.taskId=$el.attr('data-taskId');
                cipList.bookFileAddress=$el.find('input.barCode').attr('data-value');
                cipList.bookFileId=$el.attr('data-bookFileId');
                cipList.bookFileName=$el.find('input.barCode').val();
                // cipList.bookCipSynopsis=$el.find('input.cipCode').val();
                // cipList.flowId='issued';
                // cipList.flowName='待下发';
                // 针对保存后再修改上传
                CipApplyList.push(cipList);
            });
            params.bookNameList=CipApplyList;
            return params;
        },

        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            var that = this;
            this.$container.on('change', 'input[type="radio"]', this.onHandleChange.bind(this));

            that.$container.on('click','button',function () {
                if($(this).attr('data-download')){
                    window.open(util.getServerBase() + 'common/downloadFile.action?path=' + encodeURIComponent($(this).attr('data-download')), '_blank');
                }
            });
        },
        /**
         * 初始化页面数据
         */
        initPageData: function () {
            this.onHandleChange();
            this.$('div[data-flow="failureApply"]').hide();//后台回两条工作流，只显示一条
        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);

        },
        /**
         * 渲染页面
         */
        render: function () {
            this._super();

            this.initPageEvent();

            this.initPageData();
        }

    });


    module.exports = Item;

});

