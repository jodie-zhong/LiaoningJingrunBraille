define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');
    var util = require('../../../../../common/util.js');

    /**
     * Workflow Item
     */
    module.exports = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'tpr/saveOrSubmitTaskAllocation.action',
        // 批量保存/提交接口
        batchSaveAction: 'bookTopic/batchReview.action',
        // 查询接口
        detailAction: 'tpr/searchBookTrpDetail.action',

        /**
         * 重新计算差错
         */
        recalculateDiff: function () {
            var resultArray = this.data.array;// TODO
            var totalCount = this.data.totalCount;// TODO
            // 计算差错
            $("#trueOrFalseTb").find("td").each(
                function () {
                    var handle = this.$('input[name="handleState"]:checked').val();
                    if (handle === '2') {
                        var fascicule = this.$('.fascicule');
                        for (var i = 0; i < resultArray.length; i++) {
                            if (fascicule === resultArray[i].fascicule) {
                                resultArray[i].diffCount++;
                            }
                        }
                    }
                }
            );
            // 拼接差错计算表内容
            var htmlContent = "";
            for (var i = 0; i < resultArray.length; i++) {
                htmlContent += "<td>" + (i + 1) + "</td>" + "<td>" + resultArray.fascicule + "</td>" + "<td>" + resultArray.diffCount + "</td>" + "<td>" + (resultArray.diffCount / totalCount) + "</td>";// TODO
            }
            $("diffTb").html(htmlContent);
        },

        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            // 是否确认监听
            this.$container.on('change', 'input[name="confirmSelection"]', this.recalculateDiff);
        },

        /**
         * 初始化页面数据
         */
        initPageData: function () {
        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);
        },

        /**
         * 渲染页面
         */
        render: function () {
            this._super();
            this.initPageEvent();
            this.initPageData();
        }
    });
});