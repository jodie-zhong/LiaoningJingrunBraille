/**
 * 公用方法类
 */

// TODO: 联调时需要根据服务器端地址修改该配置
	var SERVER_BASE = '/';     						   	// 测试
// 	var SERVER_BASE = 'http://192.168.1.51:8080/';     	// 子健
// 	var SERVER_BASE = 'http://192.168.1.63:8083/';     	// 世杰
//  var SERVER_BASE = 'http://192.168.1.103:8080/';     // 宇豪
//  var SERVER_BASE = 'http://192.168.1.165:8080/';    	// 长山
//  var SERVER_BASE = 'http://192.168.1.179:8080/';    	// 龙龙
// 	var SERVER_BASE = 'http://192.168.1.211:8080/';    	// 田军
// 	var SERVER_BASE = 'http://192.168.1.228:8080/';     // 晨阳
//  var SERVER_BASE = 'http://192.168.1.121:8080/';    	// 钟迪
//	var SERVER_BASE = 'http://120.76.236.19:8080/';	    // 测试
//  var SERVER_BASE = 'http://120.76.29.222:33380/';	// Linux
	var ACTION_BASE = 'mw.background.web/';
	var DEBUG = false;
//  var SERVER_BASE = 'http://localhost:3001/';
//  var ACTION_BASE = '盲文社后台/mock/';
//  var DEBUG = true;

/**
 * http://git.oschina.net/loonhxl/jbase64/blob/master/jbase64.js
 * BASE64 Encode and Decode By UTF-8 unicode
 * 可以和java的BASE64编码和解码互相转化
 */
(function () {
    var BASE64_MAPPING = [
        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
        'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
        'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
        'w', 'x', 'y', 'z', '0', '1', '2', '3',
        '4', '5', '6', '7', '8', '9', '+', '/'
    ];

    /**
     *ascii convert to binary
     */
    var _toBinary = function (ascii) {
        var binary = new Array();
        while (ascii > 0) {
            var b = ascii % 2;
            ascii = Math.floor(ascii / 2);
            binary.push(b);
        }
        /*
         var len = binary.length;
         if(6-len > 0){
         for(var i = 6-len ; i > 0 ; --i){
         binary.push(0);
         }
         }*/
        binary.reverse();
        return binary;
    };

    /**
     *binary convert to decimal
     */
    var _toDecimal = function (binary) {
        var dec = 0;
        var p = 0;
        for (var i = binary.length - 1; i >= 0; --i) {
            var b = binary[i];
            if (b == 1) {
                dec += Math.pow(2, p);
            }
            ++p;
        }
        return dec;
    };

    /**
     *unicode convert to utf-8
     */
    var _toUTF8Binary = function (c, binaryArray) {
        var mustLen = (8 - (c + 1)) + ((c - 1) * 6);
        var fatLen = binaryArray.length;
        var diff = mustLen - fatLen;
        while (--diff >= 0) {
            binaryArray.unshift(0);
        }
        var binary = [];
        var _c = c;
        while (--_c >= 0) {
            binary.push(1);
        }
        binary.push(0);
        var i = 0, len = 8 - (c + 1);
        for (; i < len; ++i) {
            binary.push(binaryArray[i]);
        }

        for (var j = 0; j < c - 1; ++j) {
            binary.push(1);
            binary.push(0);
            var sum = 6;
            while (--sum >= 0) {
                binary.push(binaryArray[i++]);
            }
        }
        return binary;
    };

    var __BASE64 = {
        /**
         *BASE64 Encode
         */
        encoder: function (str) {
            var base64_Index = [];
            var binaryArray = [];
            for (var i = 0, len = str.length; i < len; ++i) {
                var unicode = str.charCodeAt(i);
                var _tmpBinary = _toBinary(unicode);
                if (unicode < 0x80) {
                    var _tmpdiff = 8 - _tmpBinary.length;
                    while (--_tmpdiff >= 0) {
                        _tmpBinary.unshift(0);
                    }
                    binaryArray = binaryArray.concat(_tmpBinary);
                } else if (unicode >= 0x80 && unicode <= 0x7FF) {
                    binaryArray = binaryArray.concat(_toUTF8Binary(2, _tmpBinary));
                } else if (unicode >= 0x800 && unicode <= 0xFFFF) {//UTF-8 3byte
                    binaryArray = binaryArray.concat(_toUTF8Binary(3, _tmpBinary));
                } else if (unicode >= 0x10000 && unicode <= 0x1FFFFF) {//UTF-8 4byte
                    binaryArray = binaryArray.concat(_toUTF8Binary(4, _tmpBinary));
                } else if (unicode >= 0x200000 && unicode <= 0x3FFFFFF) {//UTF-8 5byte
                    binaryArray = binaryArray.concat(_toUTF8Binary(5, _tmpBinary));
                } else if (unicode >= 4000000 && unicode <= 0x7FFFFFFF) {//UTF-8 6byte
                    binaryArray = binaryArray.concat(_toUTF8Binary(6, _tmpBinary));
                }
            }

            var extra_Zero_Count = 0;
            for (var i = 0, len = binaryArray.length; i < len; i += 6) {
                var diff = (i + 6) - len;
                if (diff == 2) {
                    extra_Zero_Count = 2;
                } else if (diff == 4) {
                    extra_Zero_Count = 4;
                }
                //if(extra_Zero_Count > 0){
                //	len += extra_Zero_Count+1;
                //}
                var _tmpExtra_Zero_Count = extra_Zero_Count;
                while (--_tmpExtra_Zero_Count >= 0) {
                    binaryArray.push(0);
                }
                base64_Index.push(_toDecimal(binaryArray.slice(i, i + 6)));
            }

            var base64 = '';
            for (var i = 0, len = base64_Index.length; i < len; ++i) {
                base64 += BASE64_MAPPING[base64_Index[i]];
            }

            for (var i = 0, len = extra_Zero_Count / 2; i < len; ++i) {
                base64 += '=';
            }
            return base64;
        },
        /**
         *BASE64  Decode for UTF-8
         */
        decoder: function (_base64Str) {
            var _len = _base64Str.length;
            var extra_Zero_Count = 0;
            /**
             *计算在进行BASE64编码的时候，补了几个0
             */
            if (_base64Str.charAt(_len - 1) == '=') {
                //alert(_base64Str.charAt(_len-1));
                //alert(_base64Str.charAt(_len-2));
                if (_base64Str.charAt(_len - 2) == '=') {//两个等号说明补了4个0
                    extra_Zero_Count = 4;
                    _base64Str = _base64Str.substring(0, _len - 2);
                } else {//一个等号说明补了2个0
                    extra_Zero_Count = 2;
                    _base64Str = _base64Str.substring(0, _len - 1);
                }
            }

            var binaryArray = [];
            for (var i = 0, len = _base64Str.length; i < len; ++i) {
                var c = _base64Str.charAt(i);
                for (var j = 0, size = BASE64_MAPPING.length; j < size; ++j) {
                    if (c == BASE64_MAPPING[j]) {
                        var _tmp = _toBinary(j);
                        /*不足6位的补0*/
                        var _tmpLen = _tmp.length;
                        if (6 - _tmpLen > 0) {
                            for (var k = 6 - _tmpLen; k > 0; --k) {
                                _tmp.unshift(0);
                            }
                        }
                        binaryArray = binaryArray.concat(_tmp);
                        break;
                    }
                }
            }

            if (extra_Zero_Count > 0) {
                binaryArray = binaryArray.slice(0, binaryArray.length - extra_Zero_Count);
            }

            var unicode = [];
            var unicodeBinary = [];
            for (var i = 0, len = binaryArray.length; i < len;) {
                if (binaryArray[i] == 0) {
                    unicode = unicode.concat(_toDecimal(binaryArray.slice(i, i + 8)));
                    i += 8;
                } else {
                    var sum = 0;
                    while (i < len) {
                        if (binaryArray[i] == 1) {
                            ++sum;
                        } else {
                            break;
                        }
                        ++i;
                    }
                    unicodeBinary = unicodeBinary.concat(binaryArray.slice(i + 1, i + 8 - sum));
                    i += 8 - sum;
                    while (sum > 1) {
                        unicodeBinary = unicodeBinary.concat(binaryArray.slice(i + 2, i + 8));
                        i += 8;
                        --sum;
                    }
                    unicode = unicode.concat(_toDecimal(unicodeBinary));
                    unicodeBinary = [];
                }
            }
            return unicode;
        }
    };

    window.BASE64 = __BASE64;
})();

define(function (require, exports, module) {
    "use strict";

    var util = {};

    /**
     * Base64编码
     * @param str
     * @returns {string}
     */
    util.base64Encode = function (str) {
        return BASE64.encoder(str);
    };

    /**
     * Base64解码
     * @param str
     * @returns {string}
     */
    util.base64Decode = function (str) {
        var unicode = BASE64.decoder(str);//返回会解码后的unicode码数组。
        str = [];
        for (var i = 0, len = unicode.length; i < len; ++i) {
            str.push(String.fromCharCode(unicode[i]));
        }
        return str.join('');
    };

    /**
     * 对HTML进行转义
     * @param html 待转义的HTML字符串
     * @returns {*}
     */
    util.htmlEncode = function (html) {
        var temp = document.createElement("div");
        temp.textContent = html;
        var output = temp.innerHTML;
        temp = null;
        return output;
    };

    /**
     * 对HTML进行逆转义
     * @param html 待逆转义的HTML字符串
     * @returns {*}
     */
    util.htmlDecode = function (html) {
        var temp = document.createElement("div");
        temp.innerHTML = html;
        var output = temp.textContent;
        temp = null;
        return output;
    };

    /**
     * 移植自underscore的模板
     * @param text 模板文本
     * @param data 数据（可选参数）
     * @returns {*}
     */
    util.template = function (text, data) {
        var render;
        var settings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
        };
        var noMatch = /(.)^/;
        var matcher = new RegExp([
            (settings.escape || noMatch).source,
            (settings.interpolate || noMatch).source,
            (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');
        var escapes = {
            "'": "'",
            '\\': '\\',
            '\r': 'r',
            '\n': 'n',
            '\t': 't',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        };

        var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset)
                .replace(escaper, function (match) {
                    return '\\' + escapes[match];
                });

            if (escape) {
                source += "'+\n((__t=(" + escape + "))==null?'':_.htmlEncode(__t))+\n'";
            }
            if (interpolate) {
                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            }
            if (evaluate) {
                source += "';\n" + evaluate + "\n__p+='";
            }
            index = offset + match.length;
            return match;
        });
        source += "';\n";

        if (!settings.variable) {
            source = 'with(obj||{}){\n' + source + '}\n';
        }

        source = "var __t,__p='',__j=Array.prototype.join," +
            "print=function(){__p+=__j.call(arguments,'');};\n" +
            source + "return __p;\n";
        try {
            render = new Function(settings.variable || 'obj', '_', source);
        } catch (e) {
            e.source = source;
            throw e;
        }

        if (data) {
            return render(data, util);
        }
        var template = function (data) {
            return render.call(this, data, util);
        };

        template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

        return template;
    };

    /**
     * 内部函数，动态加载脚本文件
     * @param url
     */
    util.loadScript = function (url) {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        document.getElementsByTagName('head')[0].appendChild(script);
    };

    /**
     * 对Date的扩展，将 Date 转化为指定格式的String
     * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，
     * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)
     * 例子：
     * formatDate(new Date(), "yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423
     * formatDate(new Date(), "yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18
     * @param date 日期对象
     * @param fmt 格式化字符串
     * @returns {*}
     */
    util.formatDate = function (date, fmt) {
        var o = {
            "M+": date.getMonth() + 1, //月份
            "d+": date.getDate(), //日
            "h+": date.getHours(), //小时
            "m+": date.getMinutes(), //分
            "s+": date.getSeconds(), //秒
            "q+": Math.floor((date.getMonth() + 3) / 3), //季度
            "S": date.getMilliseconds() //毫秒
        };
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp("(" + k + ")").test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            }
        }
        return fmt;
    };

    /**
     * 将URL查询参数转换为Object
     * @param str：可选参数，如果不传入默认解析当前页面查询参数
     * @returns {{object}}
     */
    util.getUrlParameters = function (str) {
        if (!str) {
            str = location.search;
        }

        if (str[0] === '?' || str[0] === '#') {
            str = str.substring(1);
        }
        var query = {};

        str.replace(/\b([^&=]*)=([^&]*)/g, function (m, a, d) {
            if (typeof query[a] !== 'undefined') {
                query[a] += ',' + decodeURIComponent(d);
            } else {
                query[a] = decodeURIComponent(d);
            }
        });

        return query;
    };

    util.fillUp = function (origin, fill, len) {
        var prefix = '';
        for (var i = 0; i < len; i++) {
            prefix += fill;
        }
        origin = prefix + origin;
        return origin.substr(origin.length - len);
    };

    /**
     * 加载动画延时计时器
     * @type {number}
     */
    util.loadingTimer = 0;

    /**
     * 显示加载动画
     * @param msg
     */
    util.showLoading = function (msg) {
        clearTimeout(util.loadingTimer);
        if ($('#loading').length === 0) {
            var html = ['<div id="loading" class="loading">'];
            html.push('  <div class="loader">');
            html.push('    <div class="loader-animate"></div>');
            html.push('    <div class="loader-text">正在加载…</div>');
            html.push('  </div>');
            html.push('</div>');
            $('body').append(html.join(''));
        }
        var $el = $('#loading');
        $el.find('.loader-text').text(msg || '正在加载...');
        // 禁止滚动
        $('body').addClass('loading-overflow');
        $el.show();
    };

    /**
     * 隐藏加载动画
     * @param delay
     */
    util.hideLoading = function (delay) {
        if (!delay || delay > 1000) {
            delay = 200;
        }
        util.loadingTimer = setTimeout(function () {
            $('#loading').hide();
            $('body').removeClass('loading-overflow');
        }, delay);
    };

    /**
     * 提示信息框
     * @param message
     * @param callback
     * @param title
     */
    util.showAlert = function (message, callback, title) {
        callback = callback || function () {
        };
        var $dialog = $('#dialogAlert');
        if ($dialog.length === 0) {
            $dialog = $('<div class="modal fade alert-dialog" id="dialogAlert" tabindex="-1" data-backdrop="static" role="alertdialog"> ' +
                '  <div class="modal-dialog custom-dialog">' +
                '    <div class="modal-content">' +
                '      <div class="modal-header bg-primary">' +
                '        <h4 class="modal-title"><strong id="dialogAlertTitle">提示</strong></h4>' +
                '      </div>' +
                '      <div class="modal-body">' +
                '        <p id="dialogAlertMessage">提示信息内容……</p>' +
                '      </div>' +
                '      <div class="modal-footer">' +
                '        <button type="button" class="btn btn-primary" id="dialogAlertOK">确定</button>' +
                '      </div>' +
                '    </div>' +
                '  </div>' +
                '</div>').appendTo('body');
        }

        // 超长的内容不显示
        if (message && message.length > 1000) {
            message = message.substr(0, 1000) + '……';
        }
        $dialog.find('#dialogAlertTitle').text(title || '提示');
        $dialog.find('#dialogAlertMessage').html(message || '提示信息...');
        $dialog.find('#dialogAlertOK').off('click').on('click', function () {
            $dialog.modal('hide');
            callback();
        });
        $dialog.modal('show');
        setTimeout(function () {
            $dialog.find('#dialogAlertOK').focus();
        }, 500);
    };

    /**
     * 确认信息框
     * @param message
     * @param okCallback
     * @param cancelCallback
     * @param title
     */
    util.showConfirm = function (message, okCallback, cancelCallback, title) {
        okCallback = okCallback || function () {
        };
        cancelCallback = cancelCallback || function () {
        };
        var $dialog = $('#dialogConfirm');
        if ($dialog.length === 0) {
            $dialog = $('<div class="modal fade alert-dialog" id="dialogConfirm" tabindex="-1" data-backdrop="static" role="alertdialog">' +
                '  <div class="modal-dialog custom-dialog">' +
                '    <div class="modal-content">' +
                '      <div class="modal-header bg-primary">' +
                '        <h4 class="modal-title"><strong id="dialogConfirmTitle">确认</strong></h4>' +
                '      </div>' +
                '      <div class="modal-body">' +
                '        <p id="dialogConfirmMessage">提示信息内容……</p>' +
                '      </div>' +
                '      <div class="modal-footer">' +
                '        <button type="button" class="btn btn-primary" id="dialogConfirmOK" tabindex="1">确定</button>' +
                '        <button type="button" class="btn btn-default" id="dialogConfirmCancel" tabindex="2">取消</button>' +
                '      </div>' +
                '    </div>' +
                '  </div>' +
                '</div>').appendTo('body');
        }

        // 超长的内容不显示
        if (message && message.length > 1000) {
            message = message.substr(0, 1000) + '……';
        }
        $dialog.find('#dialogConfirmTitle').text(title || '确认');
        $dialog.find('#dialogConfirmMessage').html(message || '提示信息...');
        $dialog.find('#dialogConfirmOK').off('click').on('click', function () {
            $dialog.modal('hide');
            okCallback();
        });
        $dialog.find('#dialogConfirmCancel').off('click').on('click', function () {
            $dialog.modal('hide');
            cancelCallback();
        });
        $dialog.modal();
    };

    /**
     * 获取服务器根路径
     * @returns {string}
     */
    util.getServerPath = function () {
        return SERVER_BASE + ACTION_BASE;
    };

    /**
     * 获取服务器上传资源的根路径
     * @returns {string}
     */
    util.getResourceRoot = function () {
        return SERVER_BASE + ACTION_BASE;
    };

    /**
     * 获取用户信息
     * @returns {*|{}}
     */
    util.getUserInfo = function () {
        return util.userInfo || {};
    };

    /**
     * Ajax方法
     * @param options
     * {
     *   action: 请求的action地址
     *   type: POST或GET（默认GET）
     *   data: JSON格式的参数对象
     *   dataType: 应答数据类型（默认json）
     * }
     */
    util.sendRequest = function (options, closeOnError) {
        // 默认的AJAX参数
        var defaultOptions = {
            dataType: 'json',
            contentType: 'application/json;charset=UTF-8',
            timeout: 60000,
            type: 'POST',
            url: util.getServerPath() + options.action + (DEBUG ? '.json' : '')
        };

        options = $.extend(defaultOptions, options);
        if (options.data) {
            options.data = JSON.stringify(options.data);
        }
        if (DEBUG) {
            options.type = 'GET';
        }

        // 重新封装成功回调，检测会话超时
        var successCallback = options.success;
        options.success = function (data) {
            if (data && data.code === 99) {
                util.hideLoading();
                util.showAlert('您尚未登录或登录已超时，请重新登录！', function () {
                    if (closeOnError) {
                        window.close();
                    } else {
                        location.href = 'login.html?t=' + (new Date()).getTime();
                    }
                });
            } else if (data && data.code === 100) {
                util.hideLoading();
                util.showAlert('该账号已在其他地方登录，您无法继续操作！', function () {
                    if (closeOnError) {
                        window.close();
                    } else {
                        location.href = 'login.html?t=' + (new Date()).getTime();
                    }
                });
            } else {
                successCallback(data);
            }
        };

        $.ajax(options);
    };

    /**
     * 日志
     */
    util.log = function () {
        // console.log.call(arguments);
    };

    /**
     * 打开新页面
     * @param page
     * @param data
     */
    util.openPage = function (page, data, silence, force) {
        if (this.index) {
            this.index.openPage(page, data, false, force);
        } else {
            console.log('index is undefined, can not open: ' + page);
        }
    };

    /**
     * 以栈方式打开新页面（不销毁旧页面）
     * @param page
     * @param data
     */
    util.pushPage = function (page, data) {

    };

    /**
     * 动态生成流程窗
     * @param workflow 全部流程
     * @param currentProcess 当前流程
     */
    util.buildProcessBar = function (workflow, currentProcess) {

    };

    /**
     * 返回服务器根路径
     * @returns {string}
     */
    util.getServerBase = function () {
        return SERVER_BASE + ACTION_BASE;
    };

    /**
     * 判断元素是否是隐藏的
     * @param $el
     */
    util.isHidden = function ($el) {

    };

    module.exports = util;
});