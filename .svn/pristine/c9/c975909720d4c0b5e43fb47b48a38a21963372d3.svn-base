define(function (require, exports, module) {
    "use strict";

    var util = require('../../../common/util');
    var PageBase = require('../../../common/base-dialog');
    var listTpl = require('./select-conference-list.tpl');

    var Module = PageBase.extend(new function () {
        var that;
        var info = null;
        var currentConferenceId = '';
        // var currentReportName = '';
        /**
         * 确定添加
         */
        function selectReportCheck() {
            var ids = [],number=0;
            // 遍历所有TR
            that.$('#selectReportTable').find('.fa-check-square-o').each(function () {
                var $el = $(this);
                var $parent=$el.parent().parent();
                ids.push($parent.attr("data-id"));
            });
            number=ids.length;
            var data = {
                reportTopicIds: ids.join(','),
                operationNum: number
            };
            data.topicMeetingId=currentConferenceId;
            data.operationType='1';
            util.showLoading('正在添加上报……');
            util.sendRequest({
                type: 'POST',
                data:data,
                action: 'meeting/addOrRemoveReport.action',
                success: function (resp) {
                    util.hideLoading();
                    console.log(resp);
                    if (resp.code === 0) {
                        util.showAlert('添加上报成功……');
                        //刷新页面
                        that.close({refresh: true});
                    } else {
                        util.showAlert(resp.message || '查询权限列表出错，请稍后重试！');
                    }
                },
                error: function (xhr) {
                    // XHR错误
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('查询权限列表出错，请稍后重试！');
                }
            });
             that.close();
        }

        /**
         * 查询事件
         */
        function selectReportSearch() {
            util.showLoading('正在查询选题列表……');
            var $serachele=$("#formSearchTopic")
            var params=that.buildFormParams($serachele.find('input'));
            console.log(params);
            util.sendRequest({
                type: 'POST',
                data:params,
                action: 'report/windowListReport.action',
                success: function (resp) {
                    util.hideLoading();
                    console.log(resp);
                    if (resp.code === 0) {
                        console.log(resp.data.records);
                        that.$('#selectReportTable').html(util.template(listTpl, {list: resp.data.records}));
                    } else {
                        util.showAlert(resp.message || '查询列表出错，请稍后重试！');
                    }
                },
                error: function (xhr) {
                    // XHR错误
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('查询列表出错，请稍后重试！');
                }
            });
        }
        //查看事件
        function bottomSearch() {
            var $el=$(this);
            var $parent=$el.parent().parent();
            var params={
                reportTopicId:$parent.attr('data-id')
            };
            console.log(params);
            util.sendRequest({
                type: 'POST',
                data: params,
                action: 'report/listBookTopicReport.action',
                success: function(resp) {
                    util.hideLoading();
                    console.log(resp);
                    if (resp.code === 0) {
                        util.showAlert(resp.message || '查看上报列表成功！');
                        that.openPage('topic/topic-conference/topic-conference-bottom-search', resp.data.records);
                    } else{
                        util.showAlert(resp.message || '查看上报列表出错，请稍后重试！');
                    }
                },
                error: function(xhr) {
                    // XHR错误
                    util.hideLoading();
                    console.log(xhr);
                    util.showAlert('查看上报列表出错，请稍后重试！');
                }
            });
        }

        /**
         * 初始化页面事件
         */
        function initPageEvent() {
            //添加选题选中事件
            that.makeSelectableTable("#selectTopicReportTable");
            //查询按钮
            that.$container.on('click', '#btnSearchReport', selectReportSearch);
            // 添加按钮
            that.$container.on('click', '#btnReportCheckSelect', selectReportCheck);
            // 查看
            that.$container.on('click', '#selectReportTable .reportSearch',bottomSearch);
        }
        /**
         * 初始化页面数据
         */
        function initPageData() {

        }

        /**
         * 初始化时被调用
         */
        this.onInit = function ($el, tpl, data, indexRef) {
            this._super($el, tpl, data, indexRef);
            that = this;
            info = data;
            that.initTemplate(tpl, {});
            that.$('input.date-time').datetimepicker({
                format: 'YYYY-MM-DD',
                locale: 'zh-cn',
                sideBySide: true
            });
            console.log(data.records)
            //生成添加选题列表
            that.$('#selectReportTable').html(util.template(listTpl,{
                list: data.records
            }));
            currentConferenceId=data.reportTopicId;
            // currentConferenceId=data.reportTopicName;
            // var ids = [];
            // if(data && data.id){
            //     ids = data.id.split(',');
            // }

            // 初始化页面事件
            initPageEvent();
            // 初始化页面数据
            initPageData();
        };

        /**
         * 页面返回事件
         * @param data
         */
        this.onBack = function (data) {
            this._super(data);

        };

        /**
         * 窗口缩放事件
         */
        this.onResize = function () {
            this._super();
        };

        /**
         * 页面销毁
         */
        this.onDestroy = function () {
            this._super();
        };


    }());

    module.exports = Module;
});