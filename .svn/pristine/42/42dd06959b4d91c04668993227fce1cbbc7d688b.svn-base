define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');
    var util = require('../../../../../common/util.js');

    /**
     * Workflow Item
     */
    var Item = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'examine/saveOrSubmitExamine.action',
        // 查询接口
        detailAction: 'examine/searchExamineDetail.action',
        
        levelTwo: {},
        
        /**
         * 初始化盲文形式
         */
        searchBookForm: function () {
            util.sendRequest({
                data: {},
                action: 'bookTopic/bookType.action',
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        var bookFrom = resp.data.oneLevel;
                        var $typeOneElement = this.$('#bookBrailleForm'), $dom;
                        for (var i in bookFrom) {
                            if (bookFrom.hasOwnProperty(i)) {
                                $dom = $('<option></option>');
                                $dom.text(bookFrom[i]);
                                $dom.val(i);
                                $typeOneElement.append($dom);
                            }
                        }
                        this.buildLevel2Type();
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '查询图书分类出错，请稍后重试！');
                    }
                }.bind(this),
                error: function (xhr) {

                }
            });
        },
        
        /**
         * 初始化图书类别
         */
        searchBookType: function () {
            util.sendRequest({
                data: {},
                action: 'bookTopic/bookType.action',
                success: function (resp) {
                    util.hideLoading();
                    if (resp.code === 0) {
                        this.levelTwo = resp.data.twoLevel;
                        var levelOne = resp.data.oneLevel;
                        var $typeOneElement = this.$('#bookTopicOne'), $dom;
                        for (var i in levelOne) {
                            if (levelOne.hasOwnProperty(i)) {
                                $dom = $('<option></option>');
                                $dom.text(levelOne[i]);
                                $dom.val(i);
                                $typeOneElement.append($dom);
                            }
                        }
                        this.buildLevel2Type();
                    } else {
                        console.log(resp);
                        util.showAlert(resp.message || '查询图书分类出错，请稍后重试！');
                    }
                }.bind(this),
                error: function (xhr) {

                }
            });
        },
        
        /**
         * 生成选题类型子类
         */
        buildLevel2Type: function () {
            // 先清空二级分类
            var $typeTwoElement = this.$('#bookTopicTwo');
            $typeTwoElement.empty();
            var $dom;
            // 当前选择的一级分类
            var levelOne = this.$('#bookTopicOne').val();
            if (this.levelTwo[levelOne]) {
                // 重新添加二级分类
                for (var i in this.levelTwo[levelOne]) {
                    if (this.levelTwo[levelOne].hasOwnProperty(i)) {
                        $dom = $('<option></option>');
                        $dom.text(this.levelTwo[levelOne][i]);
                        $dom.val(i);
                        $typeTwoElement.append($dom);
                    }
                }
            }
        },
        
        onPagination: function() {
        	var pagination = this.$('input[name="bookIsFascicle"]:checked').val();
        	if (pagination === '1') {
        		this.$('tr[data-type="3"]').show();
        		this.$('div[data-area="pagination"]').hide();
        	} else{
        		this.$('tr[data-type="3"]').hide();
        		this.$('div[data-area="pagination"]').show();
        	}
        },

        onHandleChange: function () {
            var handle = this.$('input[name="handleState"]:checked').val();
            this.$('div[data-area="nextFlow"]').hide();
            if (handle === '1') {
                // 建议发稿
                this.$('div[data-flow="secondAudit"]').show();
            } else {
            	// 退稿
                this.$('div[data-flow="abandoned"]').show();
            }
        },
        
        /**
         * 保存或提交工作流
         * @param isSubmit
         */
        getFormData: function() {
        	var $form = this.$('#formEdit');
        	// 先调用父类生成基本的数据结构
        	var params = this._super();
        	// 处理封面部份数据结构
        	params.coverList = [];  // 封面信息
        	params.machiningRecordList = [];  // 加工记录
        	var $div;
        	$form.find('div[data-area="machining"]').each(function(){
        		$div = $(this);
        		params.machiningRecordList.push({
        			machiningRecord: $div.find('textarea[name="machiningRecord"]').val()
        		});
        	});
        	
        	params.fascicleList = []; // 分册信息
        	var $tr;
        	$form.find('tr[data-area="cover"]').each(function(){
        		$tr=$(this);
        		params.coverList.push({
        			bookFileType:$tr.find('input[name="bookFileType"]').val(),
        			bookFileName: $tr.find('input[name="bookFileName"]').val(),
        			bookFileAddress:$tr.find('input[name="bookFileAddress"]').attr('data-value')
        			
        		});
        	});
        	
        	console.log(params);
        	return params;
        },
        

        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            var that = this;
            
            // 选题类型子类
            this.$container.on('change', '#bookTopicOne', this.buildLevel2Type.bind(this));
            
            // 是否分页
            this.$container.on('change','input[name="bookIsFascicle"]',this.onPagination.bind(this));
            // 初审结果
            this.$container.on('change', 'input[name="handleState"]', this.onHandleChange.bind(this));
        },

        /**
         * 初始化页面数据
         */
        initPageData: function () {
			// 初始化日期组件
            this.$('input.date-time').datetimepicker({
                format: 'YYYY-MM-DD',
                locale: 'zh-cn',
                sideBySide: true
            });
            this.searchBookForm();
            this.searchBookType();
            this.onHandleChange();
        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);
        },

        /**
         * 渲染页面
         */
        render: function () {
            this._super();

            this.initPageEvent();

            this.initPageData();
        }

    });


    module.exports = Item;

});
