define(function (require, exports, module) {
    "use strict";

    var ItemBase = require('../item-base');
    var util = require('../../../../../common/util.js');

    /**
     * Workflow Item
     */
    var Item = ItemBase.extend({
        // 保存/提交接口
        saveAction: 'cipApply/saveOrSubmitApply.action',

        // 查询接口
        detailAction: 'cipApply/searchApplyDetail.action',



        getFormData:function () {
            var $form = this.$('#formEdit');
            // 先调用父类生成基本的数据结构
//      	var params = {};
            var params = this._super();
            // 处理上传部份数据结构
            var arrAddress=[];
            $form.find('tr[data-type="ebook"]').each(function(){
                var $el=$(this);
                var obj={};
                obj.bookFascicleId=$el.attr('data-bookFascicleId');
                obj.bookFileId=$el.attr('data-bookFileId');
                obj.bookFileName=$el.find('input.bookAddress').val();
                obj.bookFileAddress=$el.find('input.bookAddress').attr('data-value');
                obj.bookFileTypeCode=$el.find('.book-file-type').attr('data-bookFileType');
                arrAddress.push(obj);
            });
            params.bookFascicleList=arrAddress;
            return params;
        },


        /**
         * 初始化页面事件
         */
        initPageEvent: function () {
            var that = this;
            // 下载
            this.$container.on('click','.btn-download',function () {
                var $el=$(this);
                if($(this).attr('data-download')){
                    window.open(util.getServerBase() + 'common/downloadFile.action?path=' + encodeURIComponent($el.attr('data-download')), '_blank');
                }
            });
            // 预览
            this.$container.on('click','.btn-preview',function () {
                var $el=$(this);
                if($el.attr('data-preview')){
                    util.showLoading();
                    util.sendRequest({
                        data: {filePath:$el.attr('data-preview')},
                        action: 'common/coverPreview.action',
                        success: function(resp) {
                            util.hideLoading();
                            if(resp.code === 0) {
                                // 预览
                                util.openPage('public/preview/html-preview', {
                                    url: util.getServerBase() + resp.data
                                });
                            } else {
                                console.log(resp);
                                util.showAlert(resp.message || '预览出错，请稍后重试！');
                            }
                        },
                        error: function(xhr) {
                            // XHR错误
                            util.hideLoading();
                            util.showAlert('预览出错，请稍后重试！');
                        }
                    });
                }
            });

            this.$container.on('change', 'input.bookAddress', function(){
                var $el=$(this);
                var $parent=$el.parents('tr');
                var $btn=$el.parents('tr').find('.btn-download');
                var $preview=$el.parents('tr').find('.btn-preview');
                $btn.attr('data-download',$el.attr('data-value'));
                $preview.attr('data-preview',$el.attr('data-value'));
                $parent.find('.book-file-type').text($el.val());
                if($el.val()===''){
                    $btn.attr('disabled','disabled');
                    $preview.attr('disabled','disabled');
                }else {
                    $btn.removeAttr('disabled');
                    $preview.removeAttr('disabled');
                }
            });
        },

        /**
         * 初始化页面数据
         */
        initPageData: function () {

        },

        /**
         * 构造函数
         * @param container
         * @param tpl
         */
        init: function (container, tpl) {
            this._super(container, tpl);

        },
        /**
         * 渲染页面
         */
        render: function () {
            this._super();

            this.initPageEvent();

            this.initPageData();
        }

    });


    module.exports = Item;

});

